
>>> '%c' %97
'a'
>>> '%c %c %c' % (97, 98,99)
'a b c'
>>> '%s' %'i love owen'
'i love owen'
>>> '%d +%d=%d'%(4,5,4+5)
'4 +5=9'
>>> '%d +%d=%d'%(4,5,4+4)
'4 +5=8'
>>> "{{0}}".format('no print')
'{0}'
>>> '{0:.1f}{1}'.format(27.658,'GB')
'27.7GB'
>>> 
>>> 
>>> "{0} love {1}.{2}".format("I","FishC","com")
'I love FishC.com'
>>> "{0} love {
SyntaxError: EOL while scanning string literal
>>> "{a} love {b}.{c}".format(a="I",b="Fishc",c="com")
'I love Fishc.com'
>>> 
>>> 
>>> '%5.1f'  %27.658
' 27.7'
>>> 
>>> '%010d' %5
'0000000005'
>>> '%-010d'%5
'5         '
>>> 
>>> print'\a'
SyntaxError: invalid syntax
>>> print"\a"
SyntaxError: invalid syntax
>>> 
>>> 
>>> 



>>> 
>>> 
>>> #序列
>>> #列表，元组，字符串共同的：
>>> #都可以通过索引得到每个元素
>>> #默认的索引。
>>> 
>>> help list
SyntaxError: invalid syntax
>>> help list()
SyntaxError: invalid syntax
>>>  help(list)
 
SyntaxError: unexpected indent
>>> help(list)
Help on class list in module builtins:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  append(...)
 |      L.append(object) -> None -- append object to end
 |  
 |  clear(...)
 |      L.clear() -> None -- remove all items from L
 |  
 |  copy(...)
 |      L.copy() -> list -- a shallow copy of L
 |  
 |  count(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  extend(...)
 |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
 |  
 |  index(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  insert(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  pop(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(...)
 |      L.remove(value) -> None -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  sort(...)
 |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

>>> 
>>> a=list （）
SyntaxError: invalid character in identifier
>>> a=list()
>>> a
[]
>>> b='I love owen'
>>> b=list(b)
>>> b
['I', ' ', 'l', 'o', 'v', 'e', ' ', 'o', 'w', 'e', 'n']
>>> 
>>> c=(1,1,2,3,5,8,13,21,34)
>>> c= list(c)
>>> 
>>> c
[1, 1, 2, 3, 5, 8, 13, 21, 34]
>>> 
>>> 
>>> len(sub)
Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    len(sub)
NameError: name 'sub' is not defined
>>> len(a)
0
>>> len(b)
11
>>> max(1,2,3,4,5)
5
>>> max(1)
Traceback (most recent call last):
  File "<pyshell#53>", line 1, in <module>
    max(1)
TypeError: 'int' object is not iterable
>>> max(b)
'w'
>>> numbers=[1.18,13,0,-98,34,54,76,32]
>>> max(numbbers)
Traceback (most recent call last):
  File "<pyshell#56>", line 1, in <module>
    max(numbbers)
NameError: name 'numbbers' is not defined
>>> max(numbers)
76
>>> min(numbers)
-98
>>> chars= '12345678890'
>>> min(chars)
'0'
>>> tuple1 = (1,2,3,4,5,6,,7,8,9)
SyntaxError: invalid syntax
>>> tuple1 = (1,2,3,4,5,6,7,8,9)
>>> max(tuple1)
9
>>> numbers.append('a')
>>> numbers
[1.18, 13, 0, -98, 34, 54, 76, 32, 'a']
>>> max(numbers)
Traceback (most recent call last):
  File "<pyshell#66>", line 1, in <module>
    max(numbers)
TypeError: unorderable types: str() > int()
>>> tuple1
(1, 2, 3, 4, 5, 6, 7, 8, 9)
>>> tuple2 = (3.1,2.3,3.4)
>>> sum(tuple2)
8.8
>>> sum(numbers)
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    sum(numbers)
TypeError: unsupported operand type(s) for +: 'float' and 'str'
>>> numbers.pop()
'a'
>>> sum(numbers)
112.18
>>> sum(numbers,8)
120.18
>>> chars
'12345678890'
>>> sum(chars)
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    sum(chars)
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> sorted(numbers)
[-98, 0, 1.18, 13, 32, 34, 54, 76]
>>> reversed(numbers)
<list_reverseiterator object at 0x007461B0>
>>> list(reversed(numbers))
[32, 76, 54, 34, -98, 0, 13, 1.18]
>>> enumerate(numbers)
<enumerate object at 0x03257EB8>
>>> list(enumerate(numbers))
[(0, 1.18), (1, 13), (2, 0), (3, -98), (4, 34), (5, 54), (6, 76), (7, 32)]
>>> 
>>> a=[1,2,3,4,5,6,7,8]
>>> b=[4,5,6,7,8]
>>> zip(a,b)
<zip object at 0x03257F30>
>>> list(zip(a,b))
[(1, 4), (2, 5), (3, 6), (4, 7), (5, 8)]
>>> 
>>> 

>>> 

>>> 
>>> #函数
>>> 
>>> def myfirstfunction()
SyntaxError: invalid syntax
>>> def myfirstfunction():
	print('this is my first function')
	print('i am very happy')
	print('thank you an')

	
>>> myfirstfunction()
this is my first function
i am very happy
thank you an
>>> 
>>> def mysecondfunction(name):
	print(name + '我爱你'）
	      
SyntaxError: invalid character in identifier
>>> def mysecondfunction(name):
	print(name + '我爱你')

	
>>> mysecondfunction
<function mysecondfunction at 0x0326FD68>
>>> mysecondfunction('owen')
owen我爱你
>>> mysecondfunction(jaxi)
Traceback (most recent call last):
  File "<pyshell#106>", line 1, in <module>
    mysecondfunction(jaxi)
NameError: name 'jaxi' is not defined
>>> mysecondfunction('jiexi','tm')
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    mysecondfunction('jiexi','tm')
TypeError: mysecondfunction() takes 1 positional argument but 2 were given
>>> 
>>> 
>>> def add(num1,num2)
SyntaxError: invalid syntax
>>> def add(num1,num2):
	result =num1+num2
	print(restult)

	
>>> add(2,4)
Traceback (most recent call last):
  File "<pyshell#115>", line 1, in <module>
    add(2,4)
  File "<pyshell#114>", line 3, in add
    print(restult)
NameError: name 'restult' is not defined
>>> def add(num1,num2):
	result =num1+num2
	print(result)

	
>>> add(2,4)
6
>>> def add(num1,num2):
	result =num1+num2

	
>>> add(5,3)
>>> def add(num1,num2):
	return num1+num2

>>> 
>>> add(3,3)
6
>>> 
>>> #函数的参数
>>> 
>>> del myttirdfunction()
SyntaxError: can't delete function call
>>> del myttirdfunction():
	
SyntaxError: invalid syntax
>>> del mythirdfunction():
	
SyntaxError: invalid syntax
>>> del mythirdfunction():
	
SyntaxError: invalid syntax
>>> def mythirdfunction():
	'这是一个测试函数'
	print('not thing so much')

	
>>> mythirdfunction._doc_
Traceback (most recent call last):
  File "<pyshell#136>", line 1, in <module>
    mythirdfunction._doc_
AttributeError: 'function' object has no attribute '_doc_'
>>> mythirdfunction. _doc_
Traceback (most recent call last):
  File "<pyshell#137>", line 1, in <module>
    mythirdfunction. _doc_
AttributeError: 'function' object has no attribute '_doc_'
>>> mythirdfunction
<function mythirdfunction at 0x0326FE40>
>>> mythirdfunction()
not thing so much
>>> mythirdfunction()._doc_
not thing so much
Traceback (most recent call last):
  File "<pyshell#140>", line 1, in <module>
    mythirdfunction()._doc_
AttributeError: 'NoneType' object has no attribute '_doc_'
>>> def mythirdfunction():
	'这是一个测试函数'
	print('not thing so much')

	
>>> print._doc_
Traceback (most recent call last):
  File "<pyshell#143>", line 1, in <module>
    print._doc_
AttributeError: 'builtin_function_or_method' object has no attribute '_doc_'
>>> print.__doc__
"print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile:  a file-like object (stream); defaults to the current sys.stdout.\nsep:   string inserted between values, default a space.\nend:   string appended after the last value, default a newline.\nflush: whether to forcibly flush the stream."
>>> mythirdfunction.__doc__
'这是一个测试函数'
>>> 
>>> #关键字参数
>>> def SaySome(name,word):
	print(name+ '-> ' +words)

	
>>> SaySome('小甲鱼','让编程改变世界'）
	
SyntaxError: invalid character in identifier
>>> SaySome('小甲鱼','让编程改变世界')
Traceback (most recent call last):
  File "<pyshell#152>", line 1, in <module>
    SaySome('小甲鱼','让编程改变世界')
  File "<pyshell#150>", line 2, in SaySome
    print(name+ '-> ' +words)
NameError: name 'words' is not defined
>>> def SaySome(name,word):
	print(name+ '-> ' +word)

	
>>> SaySome('小甲鱼','让编程改变世界')
小甲鱼-> 让编程改变世界
>>> SaySome(word='小甲鱼',name='让编程改变世界')
让编程改变世界-> 小甲鱼
>>> 
>>> #默认参数
>>> def SaySome(name='小甲鱼',word='让编程给变世界'):
	print(name+ '-> ' +word)

	
>>> SaySome()
小甲鱼-> 让编程给变世界
>>> SaySome('苍井空'）
	
SyntaxError: invalid character in identifier
>>> SaySome('苍井空')
苍井空-> 让编程给变世界
>>> SaySome('苍井空','我脱光衣服躺在镜头前，是为了生存，而你衣冠楚楚的站在镜头前，确实为了私欲和欺骗！')
苍井空-> 我脱光衣服躺在镜头前，是为了生存，而你衣冠楚楚的站在镜头前，确实为了私欲和欺骗！
>>> 
>>> #收集参数
>>> 
>>> def test(*params):
	print('参数的长度是:',len(params));
	print('第二参数是：',params[1]);

	
>>> test(1,'小甲鱼'，2.4.5，4.6.6.，7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼'，2.5，4，7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼'，4，7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼'，4,7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼'，4,7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼',2,3,5,9）
     
SyntaxError: invalid character in identifier
>>> test(1,'小甲鱼',2,3,5,9)
参数的长度是: 6
第二参数是： 小甲鱼
>>> def test(*params):
	print('参数的长度是:',len(params));
	print('第二参数是：',params[1]);

	
>>> test(1,'小甲鱼',2,3,5,exp=9)
Traceback (most recent call last):
  File "<pyshell#181>", line 1, in <module>
    test(1,'小甲鱼',2,3,5,exp=9)
TypeError: test() got an unexpected keyword argument 'exp'
>>> def test(*params):
	print('参数的长度是:',len(params),exp);
	print('第二参数是：',params[1]);

	
>>> test(1,'小甲鱼',2,3,5,exp=9)
Traceback (most recent call last):
  File "<pyshell#184>", line 1, in <module>
    test(1,'小甲鱼',2,3,5,exp=9)
TypeError: test() got an unexpected keyword argument 'exp'
>>> def test(*params,exp):
	print('参数的长度是:',len(params),exp);
	print('第二参数是：',params[1]);

	
>>> test(1,'小甲鱼',2,3,5,exp=9)
参数的长度是: 5 9
第二参数是： 小甲鱼
>>> def test(*params,exp=0):
	print('参数的长度是:',len(params),exp);
	print('第二参数是：',params[1]);

	
>>> def test(*params,exp=0):
	print('参数的长度是:',len(params),exp);
	print('第二参数是：',params[1]);

	
>>> test(1,'小甲鱼'，2.5，4，7,8）
     
SyntaxError: invalid character in identifier
>>> test(1,'owen',3,5,6,7)
参数的长度是: 6 0
第二参数是： owen
>>> 
>>> 
>>> 
>>> 
>>> #函数和过程
>>> 
>>> 
>>> def hello():
	print('hello fishc')

	
>>> temp=hello()
hello fishc
>>> temp
>>> 
>>> print(temp)
None
>>> type(temp)
<class 'NoneType'>
>>> 
